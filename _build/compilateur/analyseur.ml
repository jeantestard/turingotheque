type token =
  | PARG
  | PARD
  | CRG
  | CRD
  | SEPARATEUR
  | SI
  | OU
  | BOUCLENEGATIVE
  | BOUCLE2
  | BOUCLE
  | GAUCHE
  | DROITE
  | ECRIS
  | FIN
  | EOF
  | SYMBOLE of (string)

open Parsing;;
# 1 "compilateur/analyseur.mly"
 open Grammaire 
# 23 "compilateur/analyseur.ml"
let yytransl_const = [|
  257 (* PARG *);
  258 (* PARD *);
  259 (* CRG *);
  260 (* CRD *);
  261 (* SEPARATEUR *);
  262 (* SI *);
  263 (* OU *);
  264 (* BOUCLENEGATIVE *);
  265 (* BOUCLE2 *);
  266 (* BOUCLE *);
  267 (* GAUCHE *);
  268 (* DROITE *);
  269 (* ECRIS *);
  270 (* FIN *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  271 (* SYMBOLE *);
    0|]

let yylhs = "\255\255\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\004\000\004\000\003\000\003\000\001\000\000\000"

let yylen = "\002\000\
\005\000\007\000\005\000\002\000\001\000\001\000\001\000\001\000\
\003\000\000\000\002\000\001\000\003\000\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\012\000\015\000\000\000\000\000\000\000\013\000\
\010\000\000\000\000\000\000\000\005\000\006\000\008\000\014\000\
\007\000\011\000\000\000\000\000\000\000\004\000\009\000\000\000\
\000\000\000\000\000\000\000\000\003\000\000\000\002\000"

let yydgoto = "\002\000\
\004\000\018\000\005\000\007\000"

let yysindex = "\003\000\
\250\254\000\000\000\000\000\000\005\255\253\254\011\000\000\000\
\000\000\012\255\019\255\023\255\000\000\000\000\000\000\000\000\
\000\000\000\000\013\255\250\254\250\254\000\000\000\000\000\255\
\001\255\023\255\023\255\024\255\000\000\023\255\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\021\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\001\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\244\255\243\255\027\000"

let yytablesize = 292
let yytable = "\022\000\
\001\000\026\000\027\000\001\000\006\000\006\000\024\000\025\000\
\003\000\006\000\016\000\008\000\020\000\028\000\029\000\009\000\
\023\000\031\000\010\000\021\000\010\000\011\000\012\000\013\000\
\014\000\009\000\015\000\017\000\010\000\000\000\030\000\011\000\
\012\000\013\000\014\000\019\000\015\000\017\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\001\000\001\000\000\000\001\000\000\000\
\000\000\001\000\001\000\001\000\001\000\009\000\001\000\001\000\
\010\000\000\000\000\000\011\000\012\000\013\000\014\000\010\000\
\015\000\017\000\010\000\000\000\000\000\010\000\010\000\010\000\
\010\000\000\000\010\000\010\000"

let yycheck = "\012\000\
\000\000\002\001\002\001\001\000\005\001\005\001\020\000\021\000\
\015\001\005\001\000\000\015\001\001\001\026\000\027\000\003\001\
\004\001\030\000\006\001\001\001\000\000\009\001\010\001\011\001\
\012\001\003\001\014\001\015\001\006\001\255\255\007\001\009\001\
\010\001\011\001\012\001\009\000\014\001\015\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\003\001\004\001\255\255\006\001\255\255\
\255\255\009\001\010\001\011\001\012\001\003\001\014\001\015\001\
\006\001\255\255\255\255\009\001\010\001\011\001\012\001\003\001\
\014\001\015\001\006\001\255\255\255\255\009\001\010\001\011\001\
\012\001\255\255\014\001\015\001"

let yynames_const = "\
  PARG\000\
  PARD\000\
  CRG\000\
  CRD\000\
  SEPARATEUR\000\
  SI\000\
  OU\000\
  BOUCLENEGATIVE\000\
  BOUCLE2\000\
  BOUCLE\000\
  GAUCHE\000\
  DROITE\000\
  ECRIS\000\
  FIN\000\
  EOF\000\
  "

let yynames_block = "\
  SYMBOLE\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'listeSymboles) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 17 "compilateur/analyseur.mly"
                                                ( Si(_3, _5) )
# 187 "compilateur/analyseur.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'listeSymboles) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 18 "compilateur/analyseur.mly"
                                                      ( Alt(_3, _5, _7) )
# 196 "compilateur/analyseur.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'listeSymboles) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 19 "compilateur/analyseur.mly"
                                             ( Boucle2(_3, _5) )
# 204 "compilateur/analyseur.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 20 "compilateur/analyseur.mly"
                    ( Boucle(_2) )
# 211 "compilateur/analyseur.ml"
               : 'expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 21 "compilateur/analyseur.mly"
         ( Gauche )
# 217 "compilateur/analyseur.ml"
               : 'expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 22 "compilateur/analyseur.mly"
         ( Droite )
# 223 "compilateur/analyseur.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 23 "compilateur/analyseur.mly"
          ( Ecriture(_1) )
# 230 "compilateur/analyseur.ml"
               : 'expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 24 "compilateur/analyseur.mly"
      ( Fin )
# 236 "compilateur/analyseur.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'listeExpressions) in
    Obj.repr(
# 25 "compilateur/analyseur.mly"
                           ( Racine(List.rev _2) )
# 243 "compilateur/analyseur.ml"
               : 'expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 28 "compilateur/analyseur.mly"
( [] )
# 249 "compilateur/analyseur.ml"
               : 'listeExpressions))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'listeExpressions) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 29 "compilateur/analyseur.mly"
                              ( _2 :: _1 )
# 257 "compilateur/analyseur.ml"
               : 'listeExpressions))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 32 "compilateur/analyseur.mly"
         ( [_1] )
# 264 "compilateur/analyseur.ml"
               : 'listeSymboles))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'listeSymboles) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 33 "compilateur/analyseur.mly"
                                   ( _3 :: _1 )
# 272 "compilateur/analyseur.ml"
               : 'listeSymboles))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'listeSymboles) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'listeExpressions) in
    Obj.repr(
# 35 "compilateur/analyseur.mly"
                                   ( Programme( _1, List.rev _2) )
# 280 "compilateur/analyseur.ml"
               : Grammaire.programme))
(* Entry programme *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let programme (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Grammaire.programme)
